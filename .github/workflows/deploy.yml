name: Deploy to Server

on:
  push:
    branches: [ "main" ]   # если у тебя ветка называется master — замени
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}

      # Кладём .env на сервер из секрета ENV_PROD
      - name: Write .env on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            mkdir -p ${{ secrets.DEPLOY_PATH }}
            # Создаём/перезаписываем .env
            cat > ${{ secrets.DEPLOY_PATH }}/.env << 'EOF'
            ${{ secrets.ENV_PROD }}
            EOF

      # Копируем весь репозиторий на сервер (кроме мусора)
      - name: Copy files to server (rsync over SSH)
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: -avzr --delete --exclude '.git' --exclude 'node_modules' --exclude '.next/cache' -e "ssh -o StrictHostKeyChecking=no"
          path: ./
          remote_path: ${{ secrets.DEPLOY_PATH }}
          remote_host: ${{ secrets.SSH_HOST }}
          remote_user: ${{ secrets.SSH_USER }}
          remote_key: ${{ secrets.SSH_KEY }}

      # Собираем и перезапускаем контейнеры
      - name: Build & restart via Docker Compose on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            cd ${{ secrets.DEPLOY_PATH }}
            docker compose version
            docker compose pull || true
            docker compose build
            docker compose up -d
            docker image prune -f
