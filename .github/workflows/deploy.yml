name: Deploy to Server

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}

      - name: Test SSH connectivity
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_KEY_PASSPHRASE }}
          script: 'echo "SSH OK on $(hostname)"'

      - name: Rsync project to server
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: -avzr --delete --exclude '.git' --exclude 'node_modules' --exclude '.next/cache'
          path: ./
          remote_path: ${{ secrets.DEPLOY_PATH }}
          remote_host: ${{ secrets.SSH_HOST }}
          remote_user: ${{ secrets.SSH_USER }}
          remote_key: ${{ secrets.SSH_KEY }}
          remote_key_pass: ${{ secrets.SSH_KEY_PASSPHRASE }}

      - name: Build & restart via Docker Compose on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_KEY_PASSPHRASE }}
          script: |
            set -euo pipefail

            echo "→ Ensure deploy dir exists"
            mkdir -p "${{ secrets.DEPLOY_PATH }}"
            cd "${{ secrets.DEPLOY_PATH }}"

            echo "→ Write .env from secret"
            cat > .env << 'EOF'
            ${{ secrets.ENV_PROD }}
            EOF

            echo "→ Docker Compose version"
            docker compose version

            echo "→ Pull base images (best-effort)"
            docker compose pull || true

            echo "→ Build images"
            docker compose build

            echo "→ Up containers"
            docker compose up -d

            # Если нужно применить миграции Prisma внутри контейнера приложения — раскомментируй:
            # echo "→ Run prisma migrate deploy"
            # docker compose exec -T app npx prisma migrate deploy || true

            echo "✓ Deploy done"
