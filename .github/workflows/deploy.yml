name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          no-cache: true
          tags: |
            ghcr.io/morhuhan/ozvestnik:latest
            ghcr.io/morhuhan/ozvestnik:${{ github.sha }}

      - name: Load SSH and ENV_PROD variables
        run: |
          echo "${{ secrets.ENV_PROD }}" > .env

          SSH_HOST=$(grep '^SSH_HOST=' .env | cut -d= -f2- | tr -d '"')
          SSH_USER=$(grep '^SSH_USER=' .env | cut -d= -f2- | tr -d '"')
          DEPLOY_PATH=$(grep '^DEPLOY_PATH=' .env | cut -d= -f2- | tr -d '"')
          SSH_KEY_PASSPHRASE=$(grep '^SSH_KEY_PASSPHRASE=' .env | cut -d= -f2- | tr -d '"')

          # Извлекаем многострочный SSH ключ
          awk '/^SSH_KEY=/{flag=1;next}/^-----END OPENSSH PRIVATE KEY-----/{print;flag=0}flag' .env > key.txt
          sed -i "s/^'//;s/'$//" key.txt
          echo "-----BEGIN OPENSSH PRIVATE KEY-----" | cat - key.txt > key2.txt
          mv key2.txt key.txt
          chmod 600 key.txt

          echo "SSH_HOST=$SSH_HOST" >> $GITHUB_ENV
          echo "SSH_USER=$SSH_USER" >> $GITHUB_ENV
          echo "DEPLOY_PATH=$DEPLOY_PATH" >> $GITHUB_ENV
          echo "SSH_KEY_PASSPHRASE=$SSH_KEY_PASSPHRASE" >> $GITHUB_ENV
          echo "SSH_KEY<<EOF" >> $GITHUB_ENV
          cat key.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "✅ ENV_PROD variables loaded"
          echo "ℹ️ DEPLOY_PATH resolved as: $DEPLOY_PATH"

      - name: Create .env on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          passphrase: ${{ env.SSH_KEY_PASSPHRASE }}
          envs: DEPLOY_PATH
          script: |
            set -e
            echo "📁 Creating directory: $DEPLOY_PATH"
            mkdir -p "$DEPLOY_PATH"
            cd "$DEPLOY_PATH"
            cat > .env << 'EOF'
            ${{ secrets.ENV_PROD }}
            EOF
            chmod 600 .env
            echo "✅ .env uploaded to $PWD/.env"
            head -n 10 .env || true

      - name: Debug - List files
        run: |
          echo "📋 Files in workspace:"
          ls -la
          echo "🔍 Looking for required files:"
          test -f docker-compose.yml && echo "✅ docker-compose.yml found" || echo "❌ docker-compose.yml missing"
          test -f Dockerfile && echo "✅ Dockerfile found" || echo "❌ Dockerfile missing"
          test -f Caddyfile && echo "✅ Caddyfile found" || echo "❌ Caddyfile missing"

      - name: Upload project files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          passphrase: ${{ env.SSH_KEY_PASSPHRASE }}
          source: "docker-compose.yml,Dockerfile,Caddyfile"
          target: ${{ env.DEPLOY_PATH }}
          strip_components: 0

      - name: Restart app via docker compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          passphrase: ${{ env.SSH_KEY_PASSPHRASE }}
          envs: DEPLOY_PATH
          script: |
            set -e
            echo "📂 Working in: $DEPLOY_PATH"
            cd "$DEPLOY_PATH"
            echo "🔄 Pulling latest images..."
            docker compose pull
            echo "🚀 Starting containers..."
            docker compose up -d --remove-orphans
            docker image prune -f
            echo "✅ Deployment complete!"