// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EDITOR
  AUTHOR
  READER
}

enum Status {
  DRAFT
  REVIEW
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  role          Role      @default(READER)
  image         String?
  emailVerified DateTime?
  passwordHash  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdMedia  MediaAsset[]
}

model Article {
  id          String     @id @default(cuid())
  slug        String     @unique
  title       String     @unique
  subtitle    String? 
  status      Status     @default(DRAFT)
  publishedAt DateTime?
  sectionId   String?
  section     Section?   @relation(fields: [sectionId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  media       ArticleMedia[]
  
  authors     AuthorOnArticle[]

  content     Json
  excerpt     String?
  coverUrl    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  tags        TagOnArticle[]

  @@index([publishedAt])
}

model Section {
  id       String    @id @default(cuid())
  slug     String    @unique
  name     String    @unique
  order    Int       @default(0)
  articles Article[]
}

model Tag {
  id    String        @id @default(cuid())
  slug  String        @unique
  name  String        @unique
  tags  TagOnArticle[]
}

model EmailToken {
  id        String   @id @default(cuid())
  email     String
  name      String?
  role      Role     @default(READER)
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  @@index([email])
  @@index([expiresAt])
}

model TagOnArticle {
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  articleId String
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId     String

  @@id([articleId, tagId])
  @@index([tagId])
}

model Author {
  id          String            @id @default(cuid())
  slug        String            @unique
  lastName    String
  firstName   String
  patronymic  String            
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  articles    AuthorOnArticle[]

  @@unique([lastName, firstName, patronymic])
}


model AuthorOnArticle {
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  articleId String
  author    Author  @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String
  order     Int     @default(0)

  @@id([articleId, authorId])
  @@index([authorId])
}

enum MediaKind {
  IMAGE
  VIDEO
  OTHER
}

enum MediaRole {
  COVER
  BODY
  GALLERY
}

model MediaAsset {
  id          String   @id @default(cuid())
  kind        MediaKind
  mime        String
  filename    String      // исходное имя
  ext         String?     // расширение без точки
  size        Int?        // байты
  width       Int?
  height      Int?
  durationSec Int?

  // Я.Диск
  yandexPath  String      // например: "disk:/media/2025/08/abc123.jpg"
  publicUrl   String?     // человеко-читаемая ссылка yadi.sk
  publicKey   String?     // ключ публичного ресурса
  // кэш временного download href
  downloadHref           String?
  downloadHrefExpiresAt  DateTime?

  // подписи
  title       String?
  alt         String?
  caption     String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String?
  createdBy   User?     @relation(fields: [createdById], references: [id], onDelete: SetNull)

  usages      ArticleMedia[]
}

model ArticleMedia {
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  articleId String
  media     MediaAsset @relation(fields: [mediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaId   String
  role      MediaRole  @default(BODY)
  order     Int        @default(0)

  @@id([articleId, mediaId, role])
  @@index([mediaId])
}
