// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EDITOR
  AUTHOR
  READER
}

enum Status {
  DRAFT
  REVIEW
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  role          Role      @default(READER)
  image         String?
  emailVerified DateTime?
  passwordHash  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  createdMedia  MediaAsset[]
}

model Article {
  id            String     @id @default(cuid())
  slug          String     @unique
  title         String     @unique
  subtitle      String?
  status        Status     @default(DRAFT)
  publishedAt   DateTime?

  sectionId     String?
  section       Section?   @relation(fields: [sectionId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  // üîπ –û–ë–õ–û–ñ–ö–ê ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å–≤—è–∑—å –∫ MediaAsset (—Ç–æ–ª—å–∫–æ –¥–ª—è preview/OG/–ø–ª–∏—Ç–æ–∫)
  coverMediaId  String?
  coverMedia    MediaAsset? @relation("ArticleCover", fields: [coverMediaId], references: [id], onDelete: SetNull)

  // üîπ –ú–µ–¥–∏–∞–º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å—Ç–∞—Ç—å–∏ (–≥–ª–∞–≤–Ω—ã–π –±–ª–æ–∫/–ª–µ–Ω—Ç–∞ –∏ —Ç.–¥.)
  media         ArticleMedia[]

  // –ê–≤—Ç–æ—Ä—ã (—á–µ—Ä–µ–∑ —Å–≤—è–∑—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É)
  authors       AuthorOnArticle[]

  content       Json
  excerpt       String?
  coverUrl      String?     // –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫–æ–≤—ã–π url ‚Äî –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  tags          TagOnArticle[]

  @@index([publishedAt])
}

model Section {
  id       String    @id @default(cuid())
  slug     String    @unique
  name     String    @unique
  order    Int       @default(0)
  articles Article[]
}

model Tag {
  id    String        @id @default(cuid())
  slug  String        @unique
  name  String        @unique
  tags  TagOnArticle[]
}

model EmailToken {
  id        String   @id @default(cuid())
  email     String
  name      String?
  role      Role     @default(READER)
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  @@index([email])
  @@index([expiresAt])
}

model TagOnArticle {
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  articleId String
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId     String

  @@id([articleId, tagId])
  @@index([tagId])
}

model Author {
  id          String            @id @default(cuid())
  slug        String            @unique
  lastName    String
  firstName   String
  patronymic  String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  articles    AuthorOnArticle[]

  @@unique([lastName, firstName, patronymic])
}

model AuthorOnArticle {
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  articleId String
  author    Author  @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String
  order     Int     @default(0)

  @@id([articleId, authorId])
  @@index([authorId])
}

enum MediaKind {
  IMAGE
  VIDEO
  OTHER
}

enum MediaRole {
  COVER
  BODY
  GALLERY
}

model MediaAsset {
  id          String   @id @default(cuid())
  kind        MediaKind
  mime        String
  filename    String
  ext         String?
  size        Int?
  width       Int?
  height      Int?
  durationSec Int?

  // –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
  yandexPath  String
  publicUrl   String?
  publicKey   String?
  downloadHref          String?
  downloadHrefExpiresAt DateTime?

  // –ø–æ–¥–ø–∏—Å–∏
  title       String?
  alt         String?
  caption     String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String?
  createdBy   User?     @relation(fields: [createdById], references: [id], onDelete: SetNull)

  // üîπ –û–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ —Å–≤—è–∑–∏ –û–ë–õ–û–ñ–ï–ö (–Ω—É–∂–Ω–∞ –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–π relation)
  coverForArticles Article[] @relation("ArticleCover")

  // üîπ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å—Ç–∞—Ç—å–µ —á–µ—Ä–µ–∑ —Å–≤—è–∑—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
  usages      ArticleMedia[]
}

model ArticleMedia {
  article   Article    @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  articleId String
  media     MediaAsset @relation(fields: [mediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaId   String
  role      MediaRole  @default(BODY)
  order     Int        @default(0)

  @@id([articleId, mediaId, role])
  @@index([mediaId])
}
