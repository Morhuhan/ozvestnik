generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EDITOR
  AUTHOR
  READER
}

enum Status {
  DRAFT
  REVIEW
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  role          Role      @default(READER)
  image         String?
  emailVerified DateTime?
  passwordHash  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  bio           String?   @db.Text
  nameChangedAt DateTime?

  createdMedia  MediaAsset[]
  comments      Comment[]
}

model Article {
  id            String     @id @default(cuid())
  slug          String     @unique
  title         String     @unique
  subtitle      String?
  status        Status     @default(DRAFT)
  publishedAt   DateTime?

  sectionId     String?
  section       Section?   @relation(fields: [sectionId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  coverMediaId  String?
  coverMedia    MediaAsset? @relation("ArticleCover", fields: [coverMediaId], references: [id], onDelete: SetNull)

  media         ArticleMedia[]
  authors       AuthorOnArticle[]

  content       Json
  excerpt       String?
  coverUrl      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  tags          TagOnArticle[]

  // –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
  comments      Comment[]

  // üîπ –ù–û–í–û–ï: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  commentsEnabled        Boolean @default(true)  // –º–æ–∂–Ω–æ –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–æ–±—â–µ
  commentsGuestsAllowed  Boolean @default(true)  // –º–æ–≥—É—Ç –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Å—Ç–∏

  @@index([publishedAt])
}

model Section {
  id       String    @id @default(cuid())
  slug     String    @unique
  name     String    @unique
  order    Int       @default(0)
  articles Article[]
}

model Tag {
  id    String        @id @default(cuid())
  slug  String        @unique
  name  String        @unique
  tags  TagOnArticle[]
}

model EmailToken {
  id        String   @id @default(cuid())
  email     String
  name      String?
  role      Role     @default(READER)
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  @@index([email])
  @@index([expiresAt])
}

model TagOnArticle {
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  articleId String
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId     String

  @@id([articleId, tagId])
  @@index([tagId])
}

model Author {
  id          String            @id @default(cuid())
  slug        String            @unique
  lastName    String
  firstName   String
  patronymic  String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  articles    AuthorOnArticle[]

  @@unique([lastName, firstName, patronymic])
}

model AuthorOnArticle {
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  articleId String
  author    Author  @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String
  order     Int     @default(0)

  @@id([articleId, authorId])
  @@index([authorId])
}

enum MediaKind {
  IMAGE
  VIDEO
  OTHER
}

enum MediaRole {
  COVER
  BODY
  GALLERY
  INLINE   
}

model MediaAsset {
  id          String   @id @default(cuid())
  kind        MediaKind
  mime        String
  filename    String
  ext         String?
  size        Int?
  width       Int?
  height      Int?
  durationSec Int?

  // –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
  yandexPath  String
  publicUrl   String?
  publicKey   String?
  downloadHref          String?
  downloadHrefExpiresAt DateTime?

  // –ø–æ–¥–ø–∏—Å–∏
  title       String?
  alt         String?
  caption     String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String?
  createdBy   User?     @relation(fields: [createdById], references: [id], onDelete: SetNull)

  // –æ–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ —Å–≤—è–∑–∏ –æ–±–ª–æ–∂–µ–∫
  coverForArticles Article[] @relation("ArticleCover")

  // –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å—Ç–∞—Ç—å–µ —á–µ—Ä–µ–∑ —Å–≤—è–∑—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
  usages      ArticleMedia[]
}

model ArticleMedia {
  article   Article    @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  articleId String
  media     MediaAsset @relation(fields: [mediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaId   String
  role      MediaRole  @default(BODY)
  order     Int        @default(0)

  @@id([articleId, mediaId, role])
  @@index([mediaId])
}

enum CommentStatus {
  PUBLISHED
  PENDING
  HIDDEN
  DELETED
}

model Comment {
  id         String   @id @default(cuid())

  articleId  String
  article    Article  @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  authorId   String?
  author     User?    @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  // –¥–ª—è –≥–æ—Å—Ç–µ–π
  isGuest    Boolean  @default(false)
  guestName  String?
  guestEmail String?

  body       String

  // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç–≤–µ—Ç—ã
  parentId   String?
  parent     Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies    Comment[] @relation("CommentReplies")

  status     CommentStatus @default(PUBLISHED)

  // –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞/–∞–Ω—Ç–∏—Å–ø–∞–º
  ipHash     String?
  userAgent  String?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([articleId, createdAt])
  @@index([parentId])
}
