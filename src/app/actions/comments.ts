"use server";

import { headers } from "next/headers";
import { revalidatePath } from "next/cache";
import crypto from "crypto";
import { prisma } from "../../../lib/db";
import { getSessionUser } from "../../../lib/session";

function hashIp(ip: string) {
  const salt = process.env.IP_HASH_SALT ?? "";
  return crypto.createHash("sha256").update(`${ip}|${salt}`).digest("hex");
}

export async function addComment(formData: FormData) {
  try {
    const articleId = String(formData.get("articleId") || "");
    const slug = String(formData.get("slug") || "");
    const bodyRaw = String(formData.get("body") || "");
    const guestName = String(formData.get("guestName") || "");
    const honeypot = String(formData.get("website") || "");

    if (honeypot) return { ok: false as const, error: "Bot detected" };

    const body = bodyRaw.replace(/\r\n/g, "\n").trim();
    if (!articleId || !slug) return { ok: false as const, error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã." };
    if (body.length < 1 || body.length > 3000) {
      return { ok: false as const, error: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: 1‚Äì3000 —Å–∏–º–≤–æ–ª–æ–≤." };
    }

    const user = await getSessionUser();

    // –∏–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    if (user?.id) {
      const profile = await prisma.user.findUnique({
        where: { id: user.id },
        select: { name: true, role: true },
      });

      if (!profile?.name || profile.name.trim().length < 2) {
        return {
          ok: false as const,
          error:
            "–í –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö ‚Äî –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ.",
        };
      }

      // üö´ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è ADMIN / EDITOR / AUTHOR
      if (!["ADMIN", "EDITOR", "AUTHOR"].includes(profile.role)) {
        const windowMs = 60_000;
        const since = new Date(Date.now() - windowMs);

        const recent = await prisma.comment.findFirst({
          where: { authorId: user.id, createdAt: { gte: since } },
          select: { createdAt: true },
          orderBy: { createdAt: "desc" },
        });

        if (recent) {
          const elapsed = Date.now() - new Date(recent.createdAt).getTime();
          const leftSec = Math.max(1, Math.ceil((windowMs - elapsed) / 1000));
          return {
            ok: false as const,
            error: `–ú–æ–∂–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ –º–∏–Ω—É—Ç—É. –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${leftSec} —Å–µ–∫.`,
          };
        }
      }
    } else {
      // –ì–æ—Å—Ç—å: –∏–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
      if (guestName.trim().length < 2) {
        return { ok: false as const, error: "–î–ª—è –≥–æ—Å—Ç—è —É–∫–∞–∂–∏—Ç–µ –∏–º—è (–Ω–µ –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤)." };
      }

      const h = await headers();
      const ua = h.get("user-agent") || "";

      const windowMs = 60_000;
      const since = new Date(Date.now() - windowMs);

      const recent = await prisma.comment.findFirst({
        where: {
          isGuest: true,
          guestName: guestName.trim(),
          userAgent: ua,
          createdAt: { gte: since },
        },
        select: { createdAt: true },
        orderBy: { createdAt: "desc" },
      });

      if (recent) {
        const elapsed = Date.now() - new Date(recent.createdAt).getTime();
        const leftSec = Math.max(1, Math.ceil((windowMs - elapsed) / 1000));
        return {
          ok: false as const,
          error: `–ú–æ–∂–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ –º–∏–Ω—É—Ç—É. –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${leftSec} —Å–µ–∫.`,
        };
      }
    }

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    const h = await headers();
    const ip = (h.get("x-forwarded-for") || "").split(",")[0]?.trim() || "0.0.0.0";
    const ua = h.get("user-agent") || "";
    const ipH = hashIp(ip);

    await prisma.comment.create({
      data: {
        articleId,
        authorId: user?.id ?? null,
        isGuest: !user?.id,
        guestName: user?.id ? null : guestName.trim().slice(0, 80),
        body,
        status: "PUBLISHED",
        ipHash: ipH,
        userAgent: ua.slice(0, 255),
      },
    });

    revalidatePath(`/news/${encodeURIComponent(slug)}`);
    return { ok: true as const };
  } catch (e: any) {
    return { ok: false as const, error: e?.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π." };
  }
}
