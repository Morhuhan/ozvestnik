// app/api/comments/route.ts
import { NextResponse } from "next/server";
import crypto from "crypto";
import { prisma } from "../../../../lib/db";
import { getSessionUser } from "../../../../lib/session";

type TokenPayload = { issuedAt?: number; sig?: string | null };

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// Helpers

function normalize(s: string) {
  return s
    .toLowerCase()
    .normalize("NFKD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/[0@]+/g, "o")
    .replace(/[@a4]/g, "a")
    .replace(/[i1¬°]/g, "i")
    .replace(/[e3]/g, "e")
    .replace(/[s\$]/g, "s")
    .replace(/[^a-z–∞-—è—ë0-9\s]/gi, " ");
}
function moderate(body: string) {
  const text = normalize(body);
  const profanity = [/\b(?:—Ö—É–π|–ø–∏–∑–¥|–µ–±[–∞—É–æ–µ]|–±–ª—è|—Å—É–∫–∞|–º—É–¥–∞–∫|–∏–¥–∏–æ—Ç)\w*\b/iu, /\b(?:fuck|shit|bitch|asshole|dick|cunt)\w*\b/iu];
  const spamWords = [/\b(?:viagra|casino|crypto|–±–∏–Ω–∞—Ä–Ω(?:—ã–µ|—ã—Ö)\s+–æ–ø—Ü–∏|—Å—Ç–∞–≤–∫[–∞–∏]|—Ç–µ–ª–µ–≥—Ä–∞–º\s*–∫–∞–Ω–∞–ª)\b/iu];
  const links = (text.match(/https?:\/\/|www\./g) || []).length;
  if (spamWords.some((r) => r.test(text))) return { action: "queue" as const, reason: "spam_keywords" };
  if (profanity.some((r) => r.test(text))) return { action: "queue" as const, reason: "profanity" };
  if (links > 2) return { action: "queue" as const, reason: "too_many_links" };
  if (/(.)\1\1\1/.test(text)) return { action: "queue" as const, reason: "flood" };
  return { action: "allow" as const, reason: null };
}
function sha256(s: string) {
  return crypto.createHash("sha256").update(s).digest("hex");
}
function pluralSec(n: number) {
  const t = Math.abs(n) % 100;
  const u = t % 10;
  if (t > 10 && t < 20) return "—Å–µ–∫—É–Ω–¥";
  if (u === 1) return "—Å–µ–∫—É–Ω–¥—É";
  if (u >= 2 && u <= 4) return "—Å–µ–∫—É–Ω–¥—ã";
  return "—Å–µ–∫—É–Ω–¥";
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

export async function POST(req: Request) {
  try {
    const raw = await req.json();
    const {
      articleId,
      parentId,
      text,
      body: bodyAlt,
      guestName,
      guestEmail,
      hp,
      token,
    }: {
      articleId?: string;
      parentId?: string | null;
      text?: string;
      body?: string;
      guestName?: string;
      guestEmail?: string;
      hp?: string;
      token?: TokenPayload;
    } = raw || {};

    const headers = req.headers;
    const ua = headers.get("user-agent") ?? "";
    const ip = (headers.get("x-forwarded-for")?.split(",")[0]?.trim() || (req as any).ip || "0.0.0.0") + "";
    const ipHash = sha256(ip);

    const sessionUser = await getSessionUser();
    const userId = sessionUser?.id ?? null;

    // –ü–æ–¥—Ç—è–Ω–µ–º —Ä–æ–ª—å –∏ –±–∞–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const userRow = userId
      ? await prisma.user.findUnique({
          where: { id: userId },
          select: { role: true, isBanned: true, bannedUntil: true },
        })
      : null;

    // üî∞ –ü—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    const privileged = !!userRow && ["ADMIN", "EDITOR", "AUTHOR"].includes(userRow.role as any);

    const commentText: string = (text ?? bodyAlt ?? "").toString();

    // Honeypot: –¥–ª—è –æ–±—ã—á–Ω—ã—Ö ‚Äî ¬´—Ç–∏—Ö–∏–π –∏–≥–Ω–æ—Ä¬ª, –¥–ª—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (!privileged && typeof hp === "string" && hp.trim().length > 0) {
      return NextResponse.json({ ok: true, ignored: true });
    }

    if (!articleId || typeof commentText !== "string" || !commentText.trim()) {
      return NextResponse.json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" }, { status: 400 });
    }

    // –°—Ç–∞—Ç—å—è: —É–≤–∞–∂–∞–µ–º —Ñ–ª–∞–≥ –≤–∫–ª—é—á–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –≤—Å–µ—Ö (–≤ —Ç.—á. –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π)
    const article = await prisma.article.findUnique({
      where: { id: articleId },
      select: { commentsEnabled: true, commentsGuestsAllowed: true },
    });
    if (!article || !article.commentsEnabled) {
      return NextResponse.json({ message: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã" }, { status: 403 });
    }

    // –ì–æ—Å—Ç–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã?
    if (!userId && article.commentsGuestsAllowed === false) {
      return NextResponse.json({ message: "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö" }, { status: 403 });
    }

    // –î–ª—è –Ω–µ-–ø—Ä–∏–≤–∏–ª–µ–≥–∏–π ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —Ñ–æ—Ä–º—ã (–∞–Ω—Ç–∏–±–æ—Ç)
    if (!privileged) {
      const secret = process.env.COMMENT_TOKEN_SECRET || "";
      if (!token || typeof token.issuedAt !== "number") {
        return NextResponse.json({ message: "–¢–æ–∫–µ–Ω —Ñ–æ—Ä–º—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" }, { status: 400 });
      }
      const ageSec = (Date.now() - token.issuedAt) / 1000;
      if (ageSec < 3) {
        return NextResponse.json({ message: "–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" }, { status: 429 });
      }
      if (ageSec > 7200) {
        return NextResponse.json({ message: "–¢–æ–∫–µ–Ω —Ñ–æ—Ä–º—ã –∏—Å—Ç—ë–∫" }, { status: 400 });
      }
      if (secret) {
        const uaHash = sha256(ua).slice(0, 32);
        const expectSig = crypto.createHmac("sha256", secret).update(`${token.issuedAt}:${uaHash}`).digest("hex");
        if (token.sig !== expectSig) {
          return NextResponse.json({ message: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω" }, { status: 400 });
        }
      }
    }

    // –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è
    if (userId && !privileged) {
      const now = new Date();
      if (userRow && (userRow.isBanned || (userRow.bannedUntil && userRow.bannedUntil > now))) {
        return NextResponse.json(
          { message: "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ." },
          { status: 403 }
        );
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª—è (–¥–ª—è –≤—Å–µ—Ö ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–µ—Ä–µ–≤–∞)
    if (parentId) {
      const parent = await prisma.comment.findUnique({
        where: { id: String(parentId) },
        select: { id: true, articleId: true, status: true },
      });
      if (!parent || parent.articleId !== articleId) {
        return NextResponse.json({ message: "–ù–µ–≤–µ—Ä–Ω–∞—è –≤–µ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞" }, { status: 400 });
      }
      if (parent.status !== "PUBLISHED" && !privileged) {
        return NextResponse.json({ message: "–ù–µ–ª—å–∑—è –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–∫—Ä—ã—Ç—ã–π/—É–¥–∞–ª—ë–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" }, { status: 400 });
      }
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≥–æ—Å—Ç–µ–≤—ã–µ –ø–æ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –±–∞–Ω –≥–æ—Å—Ç—è (–¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö)
    const gName = userId ? null : (typeof guestName === "string" ? guestName.trim().slice(0, 120) : null);
    const gEmail = userId ? null : (typeof guestEmail === "string" ? guestEmail.trim().slice(0, 200) : null);

    if (!userId) {
      const now = new Date();
      const orConds: any[] = [{ ipHash }];
      if (gEmail) orConds.push({ email: gEmail });
      const guestBan = await prisma.guestBan.findFirst({
        where: { AND: [{ OR: orConds }, { OR: [{ until: null }, { until: { gt: now } }] }] },
        select: { reason: true, until: true },
      });
      if (guestBan) {
        return NextResponse.json(
          {
            message:
              `–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã` +
              (guestBan.until ? ` –¥–æ ${new Date(guestBan.until).toLocaleString("ru-RU")}` : "") +
              (guestBan.reason ? `. –ü—Ä–∏—á–∏–Ω–∞: ${guestBan.reason}` : ""),
          },
          { status: 403 }
        );
      }
    }

    // –¢–µ–∫—Å—Ç
    const safeBody = commentText.replace(/\r/g, "").trim().slice(0, 2000);

    // –õ–∏–º–∏—Ç—ã/–¥—É–±–ª–∏–∫–∞—Ç—ã/–∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö
    if (!privileged) {
      // 30 —Å–µ–∫: —Å–æ–æ–±—â–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å
      const lastRecent = await prisma.comment.findFirst({
        where: { ipHash, createdAt: { gt: new Date(Date.now() - 30 * 1000) } },
        orderBy: { createdAt: "desc" },
        select: { createdAt: true },
      });
      if (lastRecent) {
        const elapsedMs = Date.now() - new Date(lastRecent.createdAt).getTime();
        const remainMs = Math.max(0, 30 * 1000 - elapsedMs);
        const waitSec = Math.max(1, Math.ceil(remainMs / 1000));
        return NextResponse.json(
          { message: `–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${waitSec} ${pluralSec(waitSec)}.` },
          { status: 429 }
        );
      }
      // —á–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç
      const recentHour = await prisma.comment.count({
        where: { ...(userId ? { authorId: userId } : { ipHash }), createdAt: { gt: new Date(Date.now() - 3600 * 1000) } },
      });
      const limitHour = userId ? 60 : 10;
      if (recentHour >= limitHour) {
        return NextResponse.json({ message: "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —á–∞—Å." }, { status: 429 });
      }
      // –¥—É–±–ª–∏–∫–∞—Ç—ã (10 –º–∏–Ω)
      const dup = await prisma.comment.findFirst({
        where: { ipHash, body: safeBody, createdAt: { gt: new Date(Date.now() - 10 * 60 * 1000) } },
        select: { id: true },
      });
      if (dup) {
        return NextResponse.json({ message: "–ü–æ—Ö–æ–∂–µ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è." }, { status: 409 });
      }
    }

    // –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è
    const mod = privileged ? { action: "allow" as const, reason: null } : moderate(safeBody);
    const targetStatus = mod.action === "queue" ? "PENDING" : "PUBLISHED";

    const created = await prisma.comment.create({
      data: {
        articleId,
        parentId: parentId ?? null,
        body: safeBody,
        authorId: userId,
        isGuest: !userId,
        guestName: gName || null,
        guestEmail: gEmail || null,
        status: targetStatus as any,
        ipHash,
        userAgent: ua.slice(0, 500),
      },
      select: { id: true },
    });

    return NextResponse.json({ ok: true, id: created.id, queued: targetStatus === "PENDING" });
  } catch {
    return NextResponse.json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞" }, { status: 500 });
  }
}
