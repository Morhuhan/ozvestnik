import { NextResponse } from "next/server";
import { z } from "zod";
import { prisma } from "../../../../../lib/db";
import { SignJWT } from "jose";
import nodemailer from "nodemailer";

const Schema = z.object({
  email: z.string().email(),
});

function getSecret() {
  const s = process.env.PASSWORD_RESET_SECRET || process.env.NEXTAUTH_SECRET || "dev-secret";
  return new TextEncoder().encode(s);
}

export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { email } = Schema.parse(body);

    const user = await prisma.user.findUnique({
      where: { email },
      select: { email: true },
    });

    if (user) {
      const token = await new SignJWT({ email })
        .setProtectedHeader({ alg: "HS256" })
        .setExpirationTime("30m")
        .sign(getSecret());

      const baseUrl = process.env.NEXTAUTH_URL || "http://localhost:3000";
      const resetUrl = `${baseUrl}/reset?token=${encodeURIComponent(token)}`;

      if (!process.env.EMAIL_SERVER) {
        console.log("\n=== Password reset link ===\n", resetUrl, "\n–î–ª—è:", email, "\n");
      } else {
        const emailFrom = process.env.EMAIL_FROM || "";
        const emailMatch = emailFrom.match(/<(.+?)>/) || emailFrom.match(/^(.+)$/);
        const fromAddress = emailMatch ? emailMatch[1] : "radionovich.arkadiy@mail.ru";

        const emailServer = process.env.EMAIL_SERVER || "";
        const serverMatch = emailServer.match(/smtps?:\/\/(.+?):(.+?)@(.+?):(\d+)/);
        
        if (!serverMatch) {
          console.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç EMAIL_SERVER");
          throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç EMAIL_SERVER");
        }

        const [, username, password, host, port] = serverMatch;

        console.log(`üìß –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ ${host}:${port} –¥–ª—è ${email}`);

        const transporter = nodemailer.createTransport({
          host: host,
          port: parseInt(port),
          secure: port === "465",
          auth: {
            user: username,
            pass: password,
          },
          connectionTimeout: 10000,
          greetingTimeout: 5000,
          socketTimeout: 10000,
          logger: process.env.NEXTAUTH_DEBUG === "true",
          debug: process.env.NEXTAUTH_DEBUG === "true",
          requireTLS: port !== "465",
          tls: {
            ciphers: 'SSLv3',
            rejectUnauthorized: false
          }
        });

        try {
          await transporter.verify();
          console.log("‚úÖ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");

          const info = await transporter.sendMail({
            from: emailFrom,
            to: email,
            subject: "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è ‚Äî –û–∑–µ—Ä—Å–∫–∏–π –í–µ—Å—Ç–Ω–∏–∫",
            text: `–ß—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${resetUrl}`,
            html: `
              <div style="font-family:Arial,sans-serif;font-size:16px;">
                <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
                <p>–ß—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ:</p>
                <p><a href="${resetUrl}" style="color:#3366cc;">–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å</a></p>
                <p>–°—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ 30 –º–∏–Ω—É—Ç.</p>
                <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
                <hr/>
                <p style="font-size:13px;color:#888;">–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ ¬´–û–∑–µ—Ä—Å–∫–∏–π –í–µ—Å—Ç–Ω–∏–∫¬ª</p>
              </div>
            `,
          });

          console.log(`üì® –ü–∏—Å—å–º–æ –¥–ª—è ${email} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. MessageId: ${info.messageId}`);
          console.log(`üì¨ Response: ${info.response}`);
        } catch (mailError: any) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞:", mailError);
          console.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", {
            code: mailError.code,
            command: mailError.command,
            response: mailError.response,
            responseCode: mailError.responseCode,
          });
          
          return NextResponse.json({ ok: true });
        }
      }
    }

    return NextResponse.json({ ok: true });
  } catch (err: any) {
    console.error("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:", err);
    return NextResponse.json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ" }, { status: 500 });
  }
}