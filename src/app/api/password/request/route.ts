import { NextResponse } from "next/server";
import { z } from "zod";
import { prisma } from "../../../../../lib/db";
import { SignJWT } from "jose";
import nodemailer from "nodemailer";

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const Schema = z.object({
  email: z.string().email(),
});

// –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞
function getSecret() {
  const s = process.env.PASSWORD_RESET_SECRET || process.env.NEXTAUTH_SECRET || "dev-secret";
  return new TextEncoder().encode(s);
}

export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { email } = Schema.parse(body);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    const user = await prisma.user.findUnique({
      where: { email },
      select: { email: true },
    });

    // –î–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ok (—á—Ç–æ–±—ã –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å, –∫—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
    if (user) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –∏—Å—Ç–µ—á—ë—Ç —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
      const token = await new SignJWT({ email })
        .setProtectedHeader({ alg: "HS256" })
        .setExpirationTime("30m")
        .sign(getSecret());

      // URL –¥–ª—è —Å–±—Ä–æ—Å–∞
      const baseUrl = process.env.NEXTAUTH_URL || "http://localhost:3000";
      const resetUrl = `${baseUrl}/reset?token=${encodeURIComponent(token)}`;

      // –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω EMAIL_SERVER ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
      if (!process.env.EMAIL_SERVER) {
        console.log("\n=== Password reset link ===\n", resetUrl, "\n–î–ª—è:", email, "\n");
      } else {
        // –ü–∞—Ä—Å–∏–º EMAIL_FROM
        // –§–æ—Ä–º–∞—Ç: "–û–∑–µ—Ä—Å–∫–∏–π –í–µ—Å—Ç–Ω–∏–∫ <radionovich.arkadiy@mail.ru>"
        const emailFrom = process.env.EMAIL_FROM || "";
        const emailMatch = emailFrom.match(/<(.+?)>/) || emailFrom.match(/^(.+)$/);
        const fromAddress = emailMatch ? emailMatch[1] : "radionovich.arkadiy@mail.ru";

        // –ü–∞—Ä—Å–∏–º EMAIL_SERVER
        // –§–æ—Ä–º–∞—Ç: smtps://radionovich.arkadiy@mail.ru:xq1OJyYqbOWk9RghWklt@smtp.mail.ru:465
        const emailServer = process.env.EMAIL_SERVER || "";
        const serverMatch = emailServer.match(/smtps?:\/\/(.+?):(.+?)@(.+?):(\d+)/);
        
        if (!serverMatch) {
          console.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç EMAIL_SERVER");
          throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç EMAIL_SERVER");
        }

        const [, username, password, host, port] = serverMatch;

        // –°–æ–∑–¥–∞—ë–º SMTP-—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ Mail.ru
        const transporter = nodemailer.createTransport({
          host: host,
          port: parseInt(port),
          secure: port === "465", // true –¥–ª—è 465, false –¥–ª—è 587
          auth: {
            user: username,
            pass: password,
          },
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        await transporter.sendMail({
          from: emailFrom,
          to: email,
          subject: "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è ‚Äî –û–∑–µ—Ä—Å–∫–∏–π –í–µ—Å—Ç–Ω–∏–∫",
          text: `–ß—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${resetUrl}`,
          html: `
            <div style="font-family:Arial,sans-serif;font-size:16px;">
              <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
              <p>–ß—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ:</p>
              <p><a href="${resetUrl}" style="color:#3366cc;">–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å</a></p>
              <p>–°—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ 30 –º–∏–Ω—É—Ç.</p>
              <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
              <hr/>
              <p style="font-size:13px;color:#888;">–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ ¬´–û–∑–µ—Ä—Å–∫–∏–π –í–µ—Å—Ç–Ω–∏–∫¬ª</p>
            </div>
          `,
        });

        console.log(`üì® –ü–∏—Å—å–º–æ –¥–ª—è ${email} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`);
      }
    }

    return NextResponse.json({ ok: true });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:", err);
    return NextResponse.json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ" }, { status: 500 });
  }
}