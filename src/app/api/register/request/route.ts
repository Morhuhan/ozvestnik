import { NextResponse } from "next/server";
import { z } from "zod";
import { prisma } from "../../../../../lib/db";
import { SignJWT } from "jose";
import nodemailer from "nodemailer";

const Schema = z.object({
  email: z.string().email(),
});

function getSecret() {
  const s = process.env.PASSWORD_RESET_SECRET || process.env.NEXTAUTH_SECRET || "dev-secret";
  return new TextEncoder().encode(s);
}

export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { email } = Schema.parse(body);

    const user = await prisma.user.findUnique({ where: { email }, select: { email: true } });

    // –î–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ‚Äî –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º —ç—Ç–æ (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
    if (user) {
      const token = await new SignJWT({ email })
        .setProtectedHeader({ alg: "HS256" })
        .setExpirationTime("30m")
        .sign(getSecret());

      const base = process.env.NEXTAUTH_URL || "http://localhost:3000";
      const resetUrl = `${base}/reset?token=${encodeURIComponent(token)}`;

      if (!process.env.EMAIL_SERVER) {
        console.log("\n=== Password reset link ===\n", resetUrl, "\n–î–ª—è:", email, "\n");
      } else {
        const transporter = nodemailer.createTransport({
          host: "smtp.mail.ru",
          port: 465,
          secure: true,
          auth: {
            user: process.env.EMAIL_FROM?.match(/<(.*?)>/)?.[1] ?? "", // –≤—ã—Ç–∞—â–∏–º email –∏–∑ EMAIL_FROM
            pass: process.env.EMAIL_SERVER?.match(/:(.*?)@smtp\.mail\.ru/)?.[1] ?? "",
          },
        });

        await transporter.sendMail({
          to: email,
          from: process.env.EMAIL_FROM,
          subject: "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è ‚Äî –û–∑–µ—Ä—Å–∫–∏–π –í–µ—Å—Ç–Ω–∏–∫",
          text: `–ß—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${resetUrl}`,
          html: `
            <div style="font-family:Arial,sans-serif;font-size:16px;">
              <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
              <p>–ß—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</p>
              <p><a href="${resetUrl}" style="color:#3366cc;">${resetUrl}</a></p>
              <p>–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –º–∏–Ω—É—Ç.</p>
              <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
              <hr/>
              <p style="font-size:13px;color:#888;">–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ ¬´–û–∑–µ—Ä—Å–∫–∏–π –í–µ—Å—Ç–Ω–∏–∫¬ª</p>
            </div>`,
        });

        console.log(`üì® –ü–∏—Å—å–º–æ –¥–ª—è ${email} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
      }
    }

    return NextResponse.json({ ok: true });
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞:", e);
    return NextResponse.json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ" }, { status: 500 });
  }
}
