import { NextResponse } from "next/server";
import { z } from "zod";
import { prisma } from "../../../../lib/db";
import { SignJWT } from "jose";
import nodemailer from "nodemailer";

const RegisterSchema = z.object({
  email: z.string().email(),
  name: z.string().min(2).max(100),
  password: z.string().min(8).max(200),
});

function getSecret() {
  const s = process.env.PASSWORD_RESET_SECRET || process.env.NEXTAUTH_SECRET || "dev-secret";
  return new TextEncoder().encode(s);
}

export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { email, name, password } = RegisterSchema.parse(body);

    const existing = await prisma.user.findUnique({ where: { email } });
    if (existing) {
      return NextResponse.json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" }, { status: 409 });
    }

    const token = await new SignJWT({ email, name, password })
      .setProtectedHeader({ alg: "HS256" })
      .setExpirationTime("24h")
      .sign(getSecret());

    const base = process.env.NEXTAUTH_URL || "http://localhost:3000";
    const confirmUrl = `${base}/?confirm=${encodeURIComponent(token)}`;

    if (!process.env.EMAIL_SERVER) {
      console.log("\n=== Registration confirmation link ===\n", confirmUrl, "\n–î–ª—è:", email, "\n");
    } else {
      const emailServer = process.env.EMAIL_SERVER || "";
      const serverMatch = emailServer.match(/smtps?:\/\/(.+?):(.+?)@(.+?):(\d+)/);
      
      if (!serverMatch) {
        console.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç EMAIL_SERVER");
        throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç EMAIL_SERVER");
      }

      const [, username, pass, host, port] = serverMatch;

      const transporter = nodemailer.createTransport({
        host: host,
        port: parseInt(port),
        secure: port === "465",
        auth: {
          user: username,
          pass: pass,
        },
      });

      const emailFrom = process.env.EMAIL_FROM || "";

      await transporter.sendMail({
        from: emailFrom,
        to: email,
        subject: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äî –û–∑–µ—Ä—Å–∫–∏–π –í–µ—Å—Ç–Ω–∏–∫",
        text: `–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${confirmUrl}`,
        html: `
          <div style="font-family:Arial,sans-serif;font-size:16px;">
            <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!</p>
            <p>–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ ¬´–û–∑–µ—Ä—Å–∫–∏–π –í–µ—Å—Ç–Ω–∏–∫¬ª, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</p>
            <p><a href="${confirmUrl}" style="color:#3366cc;">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</a></p>
            <p>–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞.</p>
            <p>–ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
            <hr/>
            <p style="font-size:13px;color:#888;">–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ ¬´–û–∑–µ—Ä—Å–∫–∏–π –í–µ—Å—Ç–Ω–∏–∫¬ª</p>
          </div>`,
      });

      console.log(`üì® –ü–∏—Å—å–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è ${email} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
    }

    return NextResponse.json({ ok: true });
  } catch (e: unknown) {
    if (e instanceof z.ZodError) {
      return NextResponse.json(
        { error: e.issues?.[0]?.message ?? "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" },
        { status: 400 }
      );
    }
    console.error("register error", e);
    return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
  }
}